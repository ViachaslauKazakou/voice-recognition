Decorators are a powerful and elegant feature in Python that let you modify or extend the behavior of functions and methods without changing their code.

A decorator is a design pattern in Python that allows a user to add new functionality to an existing object without modifying its structure. Decorators are typically applied to functions, and they play a crucial role in enhancing or modifying the behavior of functions. Traditionally, decorators are placed before the definition of a function you want to decorate. In this tutorial, we'll demonstrate how to effectively use decorators in Python functions.

Functions as First-Class Objects
Functions in Python are first class citizens. This means that they support operations such as being passed as an argument, returned from a function, modified, and assigned to a variable. This property is crucial as it allows functions to be treated like any other object in Python, enabling greater flexibility in programming.

To easily run all the example code in this tutorial yourself, you can create a DataLab workbook for free that has Python pre-installed and contains all code samples. For more practice on decorators, check out this hands-on DataCamp exercise.

Assigning functions to variables
To kick us off we create a function that will add one to a number whenever it is called. We'll then assign the function to a variable and use this variable to call the function.



def plus_one(number):
    return number + 1

add_one = plus_one
add_one(5)

Defining functions inside other functions 
Defining functions inside other functions is a powerful feature in Python—and it's essential for building decorators. Let’s look at another core idea: passing functions as arguments. This will bring us one step closer to writing decorators.

def plus_one(number):
    def add_one(number):
        return number + 1


    result = add_one(number)
    return result
plus_one(4)


Passing functions as arguments to other functions
Functions can also be passed as parameters to other functions. Let's illustrate that below.

def plus_one(number):
    return number + 1

def function_call(function):
    number_to_add = 5
    return function(number_to_add)

function_call(plus_one)

Functions returning other functions
A function can also generate another function. We'll show that below using an example.

def hello_function():
    def say_hi():
        return "Hi"
    return say_hi
hello = hello_function()
hello()


Inner Functions and Closures
Python allows a nested function to access the outer scope of the enclosing function. This is a critical concept in decorators, known as a closure.

A closure in Python is a function that remembers the environment in which it was created, even after that environment is no longer active. This means a nested function can "close over" variables from its enclosing scope and continue to use them.

Closures are essential for understanding decorators because decorators rely on the ability of a nested wrapper function to access and modify the state of the enclosing decorator function.

Example of a closure:

def outer_function(message):
    def inner_function():
        print(f"Message from closure: {message}")
    return inner_function

closure_function = outer_function("Hello, closures!")
closure_function()
# Output: Message from closure: Hello, closures!