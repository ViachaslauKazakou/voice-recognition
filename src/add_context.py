""" add context to json files"""

import json
import copy
from datetime import datetime
from typing import Optional, Dict, Any


def add_context_to_json(file_path: str, character: str, new_context: str) -> bool:
    """
    –ù–∞—Ö–æ–¥–∏—Ç –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ JSON —Ñ–∞–π–ª–µ –∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    –Ω–∞ –µ–≥–æ –æ—Å–Ω–æ–≤–µ —Å –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º.
    
    :param file_path: –ü—É—Ç—å –∫ JSON —Ñ–∞–π–ª—É
    :param character: –ò–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
    :param new_context: –ù–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Å–æ–∑–¥–∞–≤–∞–µ–º–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    :return: True –µ—Å–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, False –∏–Ω–∞—á–µ
    """
    try:
        # –ß–∏—Ç–∞–µ–º JSON —Ñ–∞–π–ª
        with open(file_path, 'r', encoding='utf-8') as file:
            data = json.load(file)
        
        # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã JSON
        messages = []
        if isinstance(data, dict) and 'messages' in data:
            messages = data['messages']
        elif isinstance(data, list):
            messages = data
        else:
            print(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ JSON –≤ —Ñ–∞–π–ª–µ {file_path}")
            return False
        
        # –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        base_message = None
        for message in messages:
            if isinstance(message, dict) and message.get('character') == character:
                base_message = message
                break
        
        if not base_message:
            print(f"–ü–µ—Ä—Å–æ–Ω–∞–∂ '{character}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ñ–∞–π–ª–µ {file_path}")
            return False
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ
        new_message = copy.deepcopy(base_message)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ –¥—Ä—É–≥–∏–µ –ø–æ–ª—è
        new_message['context'] = new_context
        new_message['timestamp'] = datetime.now().isoformat() + 'Z'
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π ID
        existing_ids = [msg.get('id', '') for msg in messages if isinstance(msg, dict)]
        new_id = generate_new_id(existing_ids)
        new_message['id'] = new_id
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–º–µ—Ç–∫—É –æ —Ç–æ–º, —á—Ç–æ —ç—Ç–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        # new_message['generated'] = True
        # new_message['based_on'] = base_message.get('id', 'unknown')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–Ω–µ—Ü
        messages.append(new_message)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π JSON
        if isinstance(data, dict) and 'messages' in data:
            data['messages'] = messages
        else:
            data = messages
            
        with open(file_path, 'w', encoding='utf-8') as file:
            json.dump(data, file, ensure_ascii=False, indent=4)
        
        print(f"–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ '{character}' —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º '{new_context}' –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ {file_path}")
        print(f"–ë–∞–∑–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {base_message.get('content', '')[:100]}...")
        print(f"–ù–æ–≤—ã–π ID: {new_id}")
        
        return True
    
    except FileNotFoundError:
        print(f"–§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    except json.JSONDecodeError as e:
        print(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –≤ —Ñ–∞–π–ª–µ {file_path}: {e}")
        return False
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –≤ {file_path}: {e}")
        return False


def generate_new_id(existing_ids: list) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
    
    :param existing_ids: –°–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö ID
    :return: –ù–æ–≤—ã–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
    """
    # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —á–∏—Å–ª–æ–≤—ã–µ ID –∏ –≤–∑—è—Ç—å —Å–ª–µ–¥—É—é—â–∏–π
    max_num = 0
    for id_str in existing_ids:
        if id_str.startswith('msg_'):
            try:
                num = int(id_str.split('_')[1])
                max_num = max(max_num, num)
            except (ValueError, IndexError):
                continue
    
    return f"msg_{max_num + 1:03d}"


def find_character_message(file_path: str, character: str) -> Optional[Dict[Any, Any]]:
    """
    –ù–∞—Ö–æ–¥–∏—Ç –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ JSON —Ñ–∞–π–ª–µ
    
    :param file_path: –ü—É—Ç—å –∫ JSON —Ñ–∞–π–ª—É
    :param character: –ò–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
    :return: –°–ª–æ–≤–∞—Ä—å —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
    """
    try:
        with open(file_path, 'r', encoding='utf-8') as file:
            data = json.load(file)
        
        messages = []
        if isinstance(data, dict) and 'messages' in data:
            messages = data['messages']
        elif isinstance(data, list):
            messages = data
        
        for message in messages:
            if isinstance(message, dict) and message.get('character') == character:
                return message
        
        return None
    
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: {e}")
        return None


def preview_character_messages(file_path: str, character: str, limit: int = 5) -> list:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–æ–±—â–µ–Ω–∏–π –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    
    :param file_path: –ü—É—Ç—å –∫ JSON —Ñ–∞–π–ª—É
    :param character: –ò–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    :param limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–∫–∞–∑–∞
    :return: –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    """
    try:
        with open(file_path, 'r', encoding='utf-8') as file:
            data = json.load(file)
        
        messages = []
        if isinstance(data, dict) and 'messages' in data:
            messages = data['messages']
        elif isinstance(data, list):
            messages = data
        
        character_messages = []
        for message in messages:
            if isinstance(message, dict) and message.get('character') == character:
                character_messages.append(message)
                if len(character_messages) >= limit:
                    break
        
        return character_messages
    
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–º –ø—Ä–æ—Å–º–æ—Ç—Ä–µ: {e}")
        return []


def batch_add_context(file_paths: list, character: str, new_context: str) -> Dict[str, bool]:
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤
    
    :param file_paths: –°–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –∫ JSON —Ñ–∞–π–ª–∞–º
    :param character: –ò–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    :param new_context: –ù–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
    :return: –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞
    """
    results = {}
    
    for file_path in file_paths:
        print(f"\n--- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞: {file_path} ---")
        
        # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
        preview = preview_character_messages(file_path, character, 1)
        if preview:
            print(f"–ù–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {character}:")
            print(f"  –ö–æ–Ω—Ç–µ–∫—Å—Ç: {preview[0].get('context', '–ù–µ —É–∫–∞–∑–∞–Ω')}")
            print(f"  –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: {preview[0].get('content', '')[:100]}...")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        results[file_path] = add_context_to_json(file_path, character, new_context)
    
    return results


if __name__ == "__main__":
    # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    json_files = [
        'forum_knowledge_base/users.json',
        # 'forum_knowledge_base/alaev_messages.json',
        # 'forum_knowledge_base/senior_dev_messages.json',
        # –î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ JSON —Ñ–∞–π–ª–æ–≤ –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    ]
    
    character = "Alaev"
    new_context = """
–ï—Å—Ç—å –æ–±—â–µ–ø—Ä–∏–∑–Ω–∞–Ω–Ω–∞—è —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—è. –ï—Å—Ç—å –ø—Ä–∏–Ω—Ü–∏–ø–∏–∞–ª—å–Ω—ã–µ —Ä–∞–∑–ª–∏—á–∏—è –º–µ–∂–¥—É —Ä–æ–±–æ—Ç–æ–º, –º–µ—Ö–∞–Ω–∏–∫–æ–π –∏ –∞–≤—Ç–æ–º–∞—Ç–æ–º.
–†–æ–±–æ—Ç –∏ –∞–≤—Ç–æ–º–∞—Ç —Ç–µ–±–µ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –¥–∞–¥—É—Ç –ø–æ–ª–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è –Ω–∞–¥ —É–ø—Ä–∞–≤–ª—è–µ–º–æ—Å—Ç—å—é –∞–≤—Ç–æ.
–¢–µ–±–µ —ç—Ç–æ –Ω–µ –Ω—É–∂–Ω–æ. –¢–µ–±–µ –∏ —Ä–µ–¥—É–∫—Ç–æ—Ä —Å–æ–π–¥–µ—Ç. 
–£ —Ç–µ–±—è –∫–æ–ª–µ—Å–∞ –∞–≤—Ç–æ –ª–µ—Ç–∞—é—Ç –Ω–∞–¥ —è–º–∞–º–∏ –ø–æ –±–∞–ª–ª–∏—Å—Ç–∏—á–µ—Å–∫–∏–º —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—è–º ü§£
"""
    
    print(f"üîç –ü–æ–∏—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ '{character}' –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞...")
    print(f"üìù –ù–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç: '{new_context}'")
    print("=" * 70)
    
    # –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤
    results = batch_add_context(json_files, character, new_context)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\n" + "=" * 70)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    print("=" * 70)
    
    success_count = 0
    for file_path, success in results.items():
        status = "‚úÖ –£–°–ü–ï–®–ù–û" if success else "‚ùå –û–®–ò–ë–ö–ê"
        print(f"{status}: {file_path}")
        if success:
            success_count += 1
    
    print(f"\nüéØ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ: {success_count}/{len(json_files)} —Ñ–∞–π–ª–æ–≤")
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –¥—Ä—É–≥–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
    print("\n" + "=" * 70)
    print("üîç –ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–´–ô –ü–†–û–°–ú–û–¢–†:")
    print("=" * 70)
    
    for file_path in json_files:
        print(f"\n--- –§–∞–π–ª: {file_path} ---")
        messages = preview_character_messages(file_path, character, 3)
        
        if messages:
            print(f"–ù–∞–π–¥–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç {character}:")
            for i, msg in enumerate(messages, 1):
                print(f"  {i}. [{msg.get('context', '–ë–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞')}] {msg.get('content', '')[:80]}...")
        else:
            print(f"–°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç {character} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")